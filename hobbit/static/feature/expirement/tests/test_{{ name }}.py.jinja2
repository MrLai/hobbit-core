import pytest  # NOQA F401

from app.exts import db
from app.models import {{ metadata | join(', ') }}

from .import BaseTest


def register_bp():
    # just for unittest, must register in run.py
    from app.run import app as tapp
    from app import views
    if views.{{ module }}.bp.name not in tapp.blueprints:
        tapp.register_blueprint(views.{{ module }}.bp, url_prefix='/api')


register_bp()


{% for model_name, Model in metadata.items() -%}
class Test{{ model_name }}(BaseTest):

    @pytest.fixture
    def instance(self):
        instance = {{ model_name }}(username='test')
        db.session.add(instance)
        db.session.flush()
        db.session.commit()
        return instance

    def test_list(self, client):
        resp = client.get('/api/{{ Model.plural }}/')
        assert resp.status_code == 200
        assert set(resp.json.keys()) == {'items', 'page', 'page_size', 'total'}

    def test_retrieve(self, client, instance):
        resp = client.get(f'/api/{{ Model.plural }}/{instance.id}/')
        assert resp.status_code == 200
        assert set(resp.json.keys()) == {
            'created_at', 'id', 'updated_at', 'username'}

    def test_create(self, client):
        payload = {
            'username': 'test',
        }
        resp = client.post('/api/{{ Model.plural }}/', json=payload)
        assert resp.status_code == 201
        assert set(resp.json.keys()) == {
            'created_at', 'id', 'updated_at', 'username'}
        for k, v in payload.items():
            assert resp.json[k] == v

    def test_update(self, client, instance):
        payload = {
            'username': f'{instance.username}_updated',
        }
        resp = client.put(f'/api/{{ Model.plural }}/{instance.id}/', json=payload)
        assert resp.status_code == 200
        assert set(resp.json.keys()) == {
            'created_at', 'id', 'updated_at', 'username'}
        for k, v in payload.items():
            assert resp.json[k] == v

    def test_delete(self, client, instance):
        resp = client.delete(f'/api/{{ Model.plural }}/?ids={instance.id}')
        assert resp.status_code == 204
        assert {{ model_name }}.query.get(instance.id) is None
{% if not loop.last %}

{% endif %}
{%- endfor %}